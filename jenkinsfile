pipeline {
    agent any  // Use any available Jenkins agent

    environment {
        MAVEN_HOME = tool name: 'Maven', type: 'maven'
    }

    stages {
        stage('Checkout') {
            steps {
                // Pull code from GitHub
                git url: 'https://github.com/arijit0405/simple-crud-app.git', branch: 'main'
            }
        }

        stage('Build') {
            steps {
                // Clean and build the application
                sh "${MAVEN_HOME}/bin/mvn clean compile"
            }
        }

        stage('Test') {
            steps {
                // Run unit tests
                sh "${MAVEN_HOME}/bin/mvn test"
            }
            post {
                // Mark build as unstable if tests fail
                unstable {
                    echo 'Some tests failed.'
                }
            }
        }

        stage('Package') {
            steps {
                // Package the application into a .jar file
                sh "${MAVEN_HOME}/bin/mvn package"
            }
            post {
                // Archive the .jar file as a build artifact
                success {
                    archiveArtifacts artifacts: 'target/*.jar', allowEmptyArchive: true
                }
            }
        }

        stage('Deploy') {
            steps {
                // Placeholder for deploy steps (can use SSH or other methods)
                echo 'Deploying application...'
                // Example: Deploy to a remote server via SSH (if configured)
                // sshPublisher(publishers: [
                //     sshPublisherDesc(configName: 'your-server', transfers: [
                //         sshTransfer(sourceFiles: 'target/*.jar', removePrefix: 'target', remoteDirectory: '/path/to/deploy')
                //     ])
                // ])
            }
        }

        stage('Notify') {
            steps {
                // Send email notification with the build result
                mail to: 'your-email@example.com',
                     subject: "Build ${currentBuild.fullDisplayName} - ${currentBuild.result}",
                     body: "The build has ${currentBuild.result}. Check Jenkins for details: ${env.BUILD_URL}"
            }
        }
    }

    post {
        success {
            echo 'Pipeline completed successfully!'
        }
        failure {
            echo 'Pipeline failed. Check logs for more details.'
        }
    }
}
